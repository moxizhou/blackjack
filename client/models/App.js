// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.App = (function(_super) {
  __extends(App, _super);

  function App() {
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.initialize = function() {
    var dealerHand, deck, playerHand;
    this.set('deck', deck = new Deck());
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    playerHand = this.get('playerHand');
    dealerHand = this.get('dealerHand');
    playerHand.on('bust', (function(_this) {
      return function() {
        return _this.declareWinner('dealer');
      };
    })(this));
    playerHand.on('stand', (function(_this) {
      return function() {
        return _this.dealerPlay();
      };
    })(this));
    dealerHand.on('bust', (function(_this) {
      return function() {
        return _this.declareWinner('player');
      };
    })(this));
    return dealerHand.on('stand', (function(_this) {
      return function() {
        var winner;
        winner = _this.decideWinner();
        return _this.declareWinner(winner);
      };
    })(this));
  };

  App.prototype.dealerPlay = function() {
    var dealerHand;
    dealerHand = this.get('dealerHand');
    dealerHand.at(0).flip();
    while (dealerHand.trueScore() < 17) {
      if (dealerHand.trueScore() > 21) {
        dealerHand.bust();
      } else if (dealerHand.trueScore() < 17) {
        dealerHand.hit();
      }
    }
    if (dealerHand.trueScore() < 22) {
      return dealerHand.stand();
    }
  };

  App.prototype.decideWinner = function() {
    var dealerHand, playerHand;
    playerHand = this.get('playerHand');
    dealerHand = this.get('dealerHand');
    if (playerHand.scores()[0] > dealerHand.scores()[0]) {
      return "Player Wins!";
    } else if (playerHand.scores()[0] < dealerHand.scores()[0]) {
      return "Dealer Wins!";
    } else {
      return "It's a tie!";
    }
  };

  App.prototype.declareWinner = function(winner) {
    if (!alert(winner)) {
      return window.location.reload();
    }
  };

  App.prototype.whoseTurn = function() {
    var dealerHand, playerHand;
    playerHand = this.get('playerHand');
    dealerHand = this.get('dealerHand');
    if (playerHand.scores()[0] > 21) {
      return "game over";
    } else if (dealerHand.scores()[0] > 16 && dealerHand.scores()[1] > 16) {
      return "game over";
    } else if (dealerHand.hasCovered()) {
      return "dealer turn";
    } else if (dealerHand.scores()[0] < 17 || dealerHand.scores()[1] < 17) {
      return "dealer turn";
    } else {
      return "player's turn";
    }
  };

  return App;

})(Backbone.Model);
